import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
import aiosqlite
import datetime
import logging
import random

from tokens import FARMING_BOT_TOKEN

"""–ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"""
"""–ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"""
"""–ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"""

"""–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö, —Ä–æ–¥/—á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ ('–ú' / '–ñ' / '–°–†' / '–ú–ù'), —ç–º–æ–¥–∑–∏"""
param1 = ["–≤—É–ø–ø–∏—Ç", "–≤—É–ø–ø–∏—Ç–∞", "–≤—É–ø–ø–∏—Ç—É", "–≤—É–ø–ø–∏—Ç–∞", "–≤—É–ø–ø–∏—Ç–æ–º", "–≤—É–ø–ø–∏—Ç–µ", "–≤—É–ø–ø–∏—Ç—ã", "–≤—É–ø–ø–∏—Ç–æ–≤", "–≤—É–ø–ø–∏—Ç–∞–º", "–≤—É–ø–ø–∏—Ç–æ–≤", "–≤—É–ø–ø–∏—Ç–∞–º–∏", "–≤—É–ø–ø–∏—Ç–∞—Ö", "–ú", "üß∏"]

"""–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö, —Ä–æ–¥/—á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ ('–ú' / '–ñ' / '–°–†' / '–ú–ù'), —ç–º–æ–¥–∑–∏ –æ–±—ã—á–Ω–æ–≥–æ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ"""
param2 = ["–≤—É–ø–ø–∏—Ç", "–≤—É–ø–ø–∏—Ç–∞", "–≤—É–ø–ø–∏—Ç—É", "–≤—É–ø–ø–∏—Ç–∞", "–≤—É–ø–ø–∏—Ç–æ–º", "–≤—É–ø–ø–∏—Ç–µ", "–≤—É–ø–ø–∏—Ç—ã", "–≤—É–ø–ø–∏—Ç–æ–≤", "–≤—É–ø–ø–∏—Ç–∞–º", "–≤—É–ø–ø–∏—Ç–æ–≤", "–≤—É–ø–ø–∏—Ç–∞–º–∏", "–≤—É–ø–ø–∏—Ç–∞—Ö", "–ú", "üß∏", "üé†"]

"""–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
names = ["–õ–µ–≤", "–¢–∏–≥—Ä", "–ú—ã—à—å", "–õ–æ—à–∞–¥—å", "–ü–∞–Ω—Ç–µ—Ä–∞", "–ö—Ä–æ–ª–∏–∫", "–ö–∞–ø–∏–±–∞—Ä–∞", "–í–æ–ª–∫", "–õ–∏—Å–∏—Ü–∞", "–•–æ–º—è–∫",
         "–£—Ç–∫–∞", "–ì—É—Å—å", "–û–ª–µ–Ω—å", "–ë–æ–±—ë—Ä", "–°–æ–≤–∞", "–ú–µ–¥–≤–µ–¥—å", "–ü–∞–Ω–¥–∞", "–ö–µ–Ω–≥—É—Ä—É", "–û—Ä—ë–ª", "–ê–Ω—Ç–∏–ª–æ–ø–∞",
         "–ï–Ω–æ—Ç", "–õ–µ–æ–ø–∞—Ä–¥", "–ó–µ–±—Ä–∞", "–î—Ä–∞–∫–æ–Ω", "–ö–æ—à–∫–∞"]

"""–ù–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –ò.–ø., –†.–ø. –∏ –í.–ø. (–ò–ò–ò–†–†–†–í–í–í)"""
param3 = ["–®–µ—Ä—Å—Ç—å", "–ì–ª–∞–∑–∞", "–£–∑–æ—Ä", "–®–µ—Ä—Å—Ç–∏", "–ì–ª–∞–∑", "–£–∑–æ—Ä–∞", "–®–µ—Ä—Å—Ç—å", "–ì–ª–∞–∑–∞", "–£–∑–æ—Ä"]

"""–ó–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
values1 = ["–ë–µ–ª–∞—è", "–†—ã–∂–∞—è", "–ö—Ä–∞—Å–Ω–∞—è", "–ì–æ–ª—É–±–∞—è", "–ñ—ë–ª—Ç–∞—è", "–ú–∞–ª–∏–Ω–æ–≤–∞—è", "–†–∞–¥—É–∂–Ω–∞—è", "–ó–µ–ª—ë–Ω–∞—è", "–§–∏–æ–ª–µ—Ç–æ–≤–∞—è", "–°–∏–Ω—è—è"]
values2 = ["–ë–µ–ª—ã–µ", "–†—ã–∂–∏–µ", "–ö—Ä–∞—Å–Ω—ã–µ", "–ì–æ–ª—É–±—ã–µ", "–ñ—ë–ª—Ç—ã–µ", "–ú–∞–ª–∏–Ω–æ–≤—ã–µ", "–†–∞–¥—É–∂–Ω—ã–µ", "–ó–µ–ª—ë–Ω—ã–µ", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–µ", "–°–∏–Ω–∏–µ"]
values3 = ["–ü–æ–ª–æ—Å–∫–∞", "–ö–ª–µ—Ç–∫–∞", "–ü—è—Ç–Ω–∞", "–¶–≤–µ—Ç—ã", "–ö–∞–º—É—Ñ–ª—è–∂", "–õ–µ–æ–ø–∞—Ä–¥", "–ó–≤—ë–∑–¥—ã", "–§–∏–≥—É—Ä—ã", "–°–µ—Ç–∫–∞", "–†—è–±—å"]

"""–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–∫–∞—á–∫–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –≤—ã–ø—É—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ"""
price = [50, 25, 30]

"""–ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò –ü–ê–†–ê–ú–ï–¢–†–û–í"""
"""–ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò –ü–ê–†–ê–ú–ï–¢–†–û–í"""
"""–ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò –ü–ê–†–ê–ú–ï–¢–†–û–í"""

"""–û–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞–¥–µ–∂–µ–π"""
add1 = "–æ–≥–æ" if param2[12] == '–ú' else "—É—é" if param2[12] == '–ñ' else "–æ–µ" if param2[12] == '–°–†' else '—ã–µ'
add2 = "–æ–π" if param2[12] == '–ñ' else "—ã–º–∏" if param2[12] == '–ú–ù' else "—ã–º"
add3 = "–æ–π" if param2[12] == '–ñ' else "—ã–º" if param2[12] == '–ú–ù' else "–æ–º—É"
add4 = "–æ–π" if param2[12] == '–ñ' else "—ã—Ö" if param2[12] == '–ú–ù' else "–æ–≥–æ"

chance = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
"""–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"""
koffs = [1, 2, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
"""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
koffs_kol = [0, 10, 50, 100, 500, 1000, 2500, 5000, 10000, 25000, 50000]
DB_NAME = '1c.db'
TOKEN = FARMING_BOT_TOKEN


"""–°—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –¥–∞—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã.
–î–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 01.01.2000 00:00:00.
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∑–∞–Ω–∏–º–∞–µ—Ç O(1) –≤—Ä–µ–º–µ–Ω–∏, –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π"""
def check_min_datetime(date1: str, date2: str):
    if int(date1[6:11]) > int(date2[6:11]):
        return date2
    elif int(date1[6:11]) < int(date2[6:11]):
        return date1
    else:
        if int(date1[3:5]) > int(date2[3:5]):
            return date2
        elif int(date1[3:5]) < int(date2[3:5]):
            return date1
        else:
            if int(date1[0:2]) > int(date2[0:2]):
                return date2
            elif int(date1[0:2]) < int(date2[0:2]):
                return date1
            else:
                if int(date1[11:13]) > int(date2[11:13]):
                    return date2
                elif int(date1[11:13]) < int(date2[11:13]):
                    return date1
                else:
                    if int(date1[14:16]) > int(date2[14:16]):
                        return date2
                    elif int(date1[14:16]) < int(date2[14:16]):
                        return date1
                    else:
                        if int(date1[17:19]) > int(date2[17:19]):
                            return date2
                        elif int(date1[17:19]) < int(date2[17:19]):
                            return date1
                        else:
                            return 0


"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)


"""–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥"""
@dp.message(CommandStart())
async def start(message: Message):

    await message.reply(
        f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å {param1[9]} –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –∏—Ö –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ!\n'
        'üìã–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
        f'/get - –ø–æ–ª—É—á–∏—Ç—å {param1[3]}{param1[13]}\n'
        f'/buy - –∫—É–ø–∏—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∑–∞ {price[0]}{param1[13]}\n'
        '/upgrade {‚Ññ} {#} - –ø—Ä–æ–∫–∞—á–∞—Ç—å ' + f'–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∑–∞ {price[1]}{param1[13]}\n'
        '/collect {‚Ññ} - —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ' + f'–ø—Ä–æ–∫–∞—á–∞–Ω–Ω{add1} –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add2} –∑–∞ {price[2]}{param1[13]}\n'
        '/name {‚Ññ} {""} - –∑–∞–¥–∞—Ç—å –∏–º—è ' + f'–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add3} {param2[2]}\n'
        '/me - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n'
        '/time {–ß–ß} - —Å–º–µ–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ —Å –ú–°–ö\n'
        '\n{‚Ññ} - –Ω–æ–º–µ—Ä ' + f'{param2[1]}, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ\n'
        '{""} - –∏–º—è ' + f'{param2[1]}\n'
        '{–ß–ß} - —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç -15 –¥–æ +11\n'
        '{#} - –Ω–æ–º–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (1, 2 –∏–ª–∏ 3)'

    )


"""–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
@dp.message(Command(commands=['get']))
async def get(message: Message):
    lvl_up = False
    value = 0
    new = True
    maybe = False
    bonus = 0

    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    async with aiosqlite.connect(DB_NAME) as db:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        async with db.execute(f'SELECT kol FROM stat WHERE user_id={message.from_user.id}') as cursor:
            async for row in cursor:
                new = False
        if new:
            """–ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            await db.execute(
                f'INSERT INTO stat(user_id, kol, koff, gets_kol, time) VALUES ({message.from_user.id}, 0, 0, 0, 0)')
            await db.commit()
            kol, last, koff_index, gets_kol, timezona, bonus_date = 0, None, 0, 0, 0, None
        else:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ë–î"""
            async with db.execute(
                    f'SELECT kol, last, gets_kol, koff, time, bonus_date FROM stat WHERE user_id={message.from_user.id}') as cursor:
                async for row in cursor:
                    kol = row[0]
                    last = row[1]
                    gets_kol = row[2] + 1
                    koff_index = row[3]
                    timezona = row[4]
                    bonus_date = row[5]

        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if int(timezona) >= 0:
            dtime = (datetime.datetime.now() + datetime.timedelta(hours=int(timezona))).strftime("%d.%m.%Y %X")
        else:
            dtime = (datetime.datetime.now() - datetime.timedelta(hours=abs(int(timezona)))).strftime("%d.%m.%Y %X")

        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
        get_kol = koffs[koff_index]

        if not (last is None):
            """–í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ë–î"""
            h2 = (datetime.datetime(day=int(last[0:2]), month=int(last[3:5]), year=int(last[6:10]),
                                    hour=int(last[11:13]), minute=int(last[14:16]),
                                    second=int(last[17:19])) + datetime.timedelta(hours=2)).strftime("%d.%m.%Y %X")

            """–ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å"""
            bonus = int(random.choice(chance) * 5 * random.choice([2, 2.5, 3])) * koffs[koff_index]
            if bonus_date is None:
                get_kol += bonus
                await db.execute(f'UPDATE stat SET bonus_date="{datetime.date.today().strftime("%d.%m.%Y")}" WHERE user_id={message.from_user.id}')
                await db.commit()
            else:
                if check_min_datetime(datetime.date.today().strftime("%d.%m.%Y %X"), bonus_date + " 00:00:00") == bonus_date + " 00:00:00":
                    get_kol += bonus
                    await db.execute(f'UPDATE stat SET bonus_date="{datetime.date.today().strftime("%d.%m.%Y")}" WHERE user_id={message.from_user.id}')
                    await db.commit()

        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
        if koff_index + 1 < len(koffs_kol):
            if gets_kol == koffs_kol[koff_index + 1]:
                lvl_up = True
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        if last is None:
            maybe = True
        elif check_min_datetime(dtime, h2) != dtime:
            maybe = True
        if maybe:
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
            await db.execute(
                f'UPDATE stat SET kol={kol + get_kol}, last="{dtime}", koff={koff_index + (1 if lvl_up else 0)}, gets_kol={gets_kol} WHERE user_id={message.from_user.id}')
            await db.commit()
            await message.reply(
                f'{message.from_user.full_name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {get_kol}{param1[13]}{" (–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: " + str(bonus) + param1[13] + ")" if get_kol != koffs[koff_index] else ""}\n'
                f'–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞. –í—Å–µ–≥–æ: {kol + get_kol}{param1[13]}\n'
                f'{"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! " if lvl_up else ""}–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {koff_index + 1 + (1 if lvl_up else 0)} (x{koffs[koff_index + (1 if lvl_up else 0)]}). {"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: " + str(koffs_kol[koff_index + 1 + (1 if lvl_up else 0)] - gets_kol) if koff_index + 1 != len(koffs_kol) else ""}')
        else:
            await message.reply(f'–†–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç—å {param1[9]}‚ùå')


"""–ü–æ–∫—É–ø–∫–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
@dp.message(Command(commands=['buy']))
async def buy(message: Message):
    balance = 0
    num = 1
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    async with aiosqlite.connect(DB_NAME) as db:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        async with db.execute(f'SELECT kol FROM stat WHERE user_id={message.from_user.id}') as cursor:
            async for row in cursor:
                balance = row[0]

        """ID –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É–Ω–∏–∫–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
        async with db.execute(f'SELECT max(id) FROM legendary WHERE user_id={message.from_user.id}') as cursor:
            async for row in cursor:
                if not (row[0] is None):
                    num = row[0] + 1
                else:
                    num = 1

        if balance >= price[0]:
            """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
            name_ = random.choice(names)
            value1 = random.choice(chance)
            value2 = random.choice(chance)
            value3 = random.choice(chance)

            """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
            await db.execute(f'UPDATE stat SET kol={balance - price[0]} WHERE user_id={message.from_user.id}')
            await db.execute(
                f'INSERT INTO legendary(id, user_id, animal, value1, value2, value3) VALUES({num}, {message.from_user.id}, "{name_}", {value1}, {value2}, {value3})')
            await db.commit()
            await message.reply(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add4} {param2[1]}!{param2[14]}\n'
                                f'‚Ññ: {num}\n'
                                f'–í–∏–¥: {name_}\n'
                                f'–£—Ä–æ–≤–µ–Ω—å {param3[3]}: {value1}\n'
                                f'–£—Ä–æ–≤–µ–Ω—å {param3[4]}: {value2}\n'
                                f'–£—Ä–æ–≤–µ–Ω—å {param3[5]}: {value3}\n\n'
                                f'–ü—Ä–æ–∫–∞—á–∞–π—Ç–µ {param2[3]} –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add2}!')
        else:
            await message.reply(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {param1[7]}‚ùå')


"""–ü—Ä–æ—Ñ–∏–ª—å"""
@dp.message(Command(commands=['me']))
async def me(message: Message):
    text = ''
    prof = []
    count = 0
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    async with aiosqlite.connect(DB_NAME) as db:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        async with db.execute(f'SELECT * FROM stat WHERE user_id={message.from_user.id}') as cursor:
            async for row in cursor:
                prof = list(row)
                h2 = (datetime.datetime(day=int(prof[2][0:2]), month=int(prof[2][3:5]), year=int(prof[2][6:10]),
                                        hour=int(prof[2][11:13]), minute=int(prof[2][14:16]),
                                        second=int(prof[2][17:19])) + datetime.timedelta(hours=2)).strftime("%d.%m.%Y %X")
                if int(prof[5]) >= 0:
                    BOOL = check_min_datetime(h2, str((datetime.datetime.now() + datetime.timedelta(hours=int(prof[5]))).strftime("%d.%m.%Y %X"))) != h2
                else:
                    BOOL = check_min_datetime(h2, str((datetime.datetime.now() - datetime.timedelta(hours=abs(int(prof[5])))).strftime("%d.%m.%Y %X"))) != h2
        if not prof:
            """–ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            await db.execute(
                f'INSERT INTO stat(user_id, kol, koff, gets_kol, time) VALUES ({message.from_user.id}, 0, 0, 0, 0)')
            await db.commit()
            prof = [message.from_user.id, 0, None, 0, 0, 0]
            BOOL = False

        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö"""
        async with db.execute(f'SELECT * FROM legendary WHERE user_id={message.from_user.id}') as cursor:
            async for row in cursor:
                count += 1
                text += f'‚Ññ{row[0]}, {row[2]}{" " + row[3] if row[3] else ""}, {param3[0]}: {row[4] if row[4] else row[5]}, {param3[1]}: {row[6] if row[6] else row[7]}, {param3[2]}: {row[8] if row[8] else row[9]}\n'

    """–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await message.reply(f'üÜîID: {prof[0]}\n'
                        f'{param1[13]}{param1[7].capitalize()}: {prof[1]}\n'
                        f'{param1[13]}–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {prof[3]}\n'
                        f'‚ÜóÔ∏è–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {prof[4] + 1} (x{koffs[prof[4]]})\n'
                        f'{"üÜô–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: " + str(koffs_kol[prof[4] + 1] - prof[3]) if prof[4] + 1 != len(koffs_kol) else ""}\n'
                        f'‚è∞–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ: {h2 if BOOL else '—É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ! /get'}\n'
                        f'\n‚öôÔ∏è–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–°–ö{"+" if int(prof[5]) >= 0 else ""}{int(prof[5])}'
                        )
    if count > 0:
        await message.reply(f'{param2[14]}–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö {param2[7]}: {count}\n{text}')
    # print(prof)
    # print(text)


"""–ü—Ä–æ–∫–∞—á–∫–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
@dp.message(Command(commands=['upgrade']))
async def upgrade(message: Message):
    status = "OK"
    num = 0
    text = message.text.split()
    add = ''
    p1 = "0"
    p2 = "1"
    value = 0.0
    kol = 0

    if len(text) >= 3:
        p1 = text[1]
        p2 = text[2]
    else:
        status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå"

    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    async with aiosqlite.connect(DB_NAME) as db:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö"""
        async with db.execute(f'SELECT max(id) FROM legendary WHERE user_id={message.from_user.id}') as cursor:
            async for row in cursor:
                if row is None:
                    status = f"–ù–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö {param2[7]}‚ùå"
                else:
                    num = row[0]

        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
        if p2 in ['1', '2', '3'] and p1 in [str(x) for x in range(1, num+1)]:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
            async with db.execute(
                    f'SELECT value{p2} FROM legendary WHERE user_id={message.from_user.id} AND id={p1}') as cursor:
                async for row in cursor:
                    if row is None:
                        status = "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è‚ùå"
                    else:
                        value = row[0]
                        if value > 0.9:
                            status = "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å‚ùå"
        else:
            status = "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è‚ùå"
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        async with db.execute(f'SELECT kol FROM stat WHERE user_id={message.from_user.id}') as cursor:
            async for row in cursor:
                if row is None:
                    status = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {param1[7]}‚ùå"
                else:
                    kol = row[0]
                    if kol < price[1]:
                        status = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {param1[7]}‚ùå"
        # if 1 <= int(text[2]) <= 3 and 1 <= int(text[1]) <= num and value <= 0.9 and kol >= 50:

        if status == "OK":
            """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
            if text[2] == '1':
                add = param3[6]
            elif text[2] == '2':
                add = param3[7]
            else:
                add = param3[8]
            await db.execute(f'UPDATE stat SET kol={kol - price[1]} WHERE user_id={message.from_user.id}')
            await db.execute(
                f'UPDATE legendary SET value{text[2]} = {round(value + 0.1, 1)} WHERE user_id={message.from_user.id} AND id={text[1]}')
            await db.commit()
            await message.reply(f'–í—ã –ø—Ä–æ–∫–∞—á–∞–ª–∏ {add} –¥–æ {round(value + 0.1, 1) if value < 0.9 else 1}!\n'
                                f'–í–∞—à –±–∞–ª–∞–Ω—Å: {kol - price[1]}{param1[13]}\n')
        else:
            await message.reply(status)


"""–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º"""
@dp.message(Command(commands=['collect', 'collectible', 'collected']))
async def collect(message: Message):
    status = "OK"
    enable_ = True
    num = 0
    kol = 0
    balance = 0
    check_values = 0
    text = message.text.split()
    if len(text) >= 2:
        num = text[1]
    else:
        status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå"
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
    async with aiosqlite.connect(DB_NAME) as db:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
        async with db.execute('SELECT COUNT(*) FROM legendary') as cursor:
            async for row in cursor:
                if row is None:
                    enable_ = True
                else:
                    if len(names) * len(values1) * len(values2) * len(values3) == row[0]:
                        status = f"–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ {param2[6]} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å‚ùå"

        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        async with db.execute(
                f'SELECT value1, value2, value3 FROM legendary WHERE user_id={message.from_user.id} AND id={num}') as cursor:
            async for row in cursor:
                if row is None:
                    status = "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è‚ùå"
                else:
                    check_values = sum(row)
                    if check_values < 3:
                        status = f"{param2[0].capitalize()} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–∫–∞—á–∞–Ω‚ùå"

        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        async with db.execute(f'SELECT kol FROM stat WHERE user_id={message.from_user.id}') as cursor:
            async for row in cursor:
                if row is None:
                    status = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {param1[7]}‚ùå"
                else:
                    balance = row[0]
                    if balance < price[2]:
                        status = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {param1[7]}‚ùå"

        if status == "OK":
            """–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
            value1 = random.choice(values1)
            value2 = random.choice(values2)
            value3 = random.choice(values3)
            check = True
            """–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
            async with db.execute(
                    f'SELECT id FROM legendary WHERE class1="{value1}" AND class2="{value2}" AND class3="{value3}"') as cursor:
                async for row in cursor:
                    if row is None:
                        check = True
                    else:
                        check = False

            """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –Ω–∞ –ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
            while not check:
                value1 = random.choice(values1)
                value2 = random.choice(values2)
                value3 = random.choice(values3)
                async with db.execute(
                        f'SELECT id FROM legendary WHERE class1="{value1}" AND class2="{value2}" AND class3="{value3}"') as cursor:
                    async for row in cursor:
                        if row is None:
                            check = True
                            break
                        else:
                            check = False

            """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
            await db.execute(
                f'UPDATE legendary SET class1="{value1}", class2="{value2}", class3="{value3}" WHERE user_id={message.from_user.id} AND id={num}')
            await db.execute(f'UPDATE stat SET kol={balance - price[2]} WHERE user_id={message.from_user.id}')
            await db.commit()
            await message.reply(f'{param2[0].capitalize()} ‚Ññ{num} —Å—Ç–∞–ª –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add2}!{param2[14]}\n'
                                f'{param3[0]}: {value1}\n'
                                f'{param3[1]}: {value2}\n'
                                f'{param3[2]}: {value3}\n'
                                f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance - price[2]}{param1[13]}')
        else:
            await message.reply(status)


@dp.message(Command(commands=['new_admin', 'add_admin']))
async def new_admin(message: Message):
    check = False
    id_ = 0
    if len(message.text.split()) >= 2:
        id_ = message.text.split()[1]
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute(f'SELECT * FROM admins') as cursor:
            async for ADMIN_ID in cursor:
                if message.from_user.id == ADMIN_ID[0]:
                    check = True
                    break
        try:
            if check:
                await db.execute(f'INSERT INTO admins(id) VALUES({id_})')
                await db.commit()
                await message.reply('–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!')
            else:
                await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùå')

        except:
            await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID‚ùå')


"""–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""
@dp.message(Command(commands=['name']))
async def naming(message: Message):
    if len(message.text.split()) >= 3:
        id_ = message.text.split()[1]
        name_ = ' '.join(message.text.split()[2:])
        count = 0
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        async with aiosqlite.connect(DB_NAME) as db:
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π"""
            async with db.execute(f'SELECT max(id) FROM legendary WHERE user_id={message.from_user.id}') as cursor:
                async for kol in cursor:
                    if not (kol[0] is None):
                        count = kol[0]
                    else:
                        count = 0
            try:
                """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
                if count > 0:
                    if 1 <= int(id_) <= count:
                        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—É—é SQL-–∏–Ω—ä–µ–∫—Ü–∏—é"""
                        BOOL = '"' in name_ or "'" in name_ or ')' in name_ or '}' in name_ or '--' in name_ or '=' in name_ or \
                            'union' in name_.lower() or 'concat' in name_.lower() or '*' in name_ or ';' in name_ or '@' in name_ or \
                            '|' in name_ or '%' in name_ or '#' in name_ or 'select' in name_.lower() or 'where' in name_.lower() or \
                            '/' in name_ or 'delete' in name_.lower()
                        if not BOOL:
                            """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
                            await db.execute(
                                f'UPDATE legendary SET name="{name_}" WHERE user_id={message.from_user.id} AND id={id_}')
                            await db.commit()
                            await message.reply('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!')
                        else:
                            await message.reply('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã‚ùå')
                            async with db.execute(f'SELECT * FROM admins') as cursor:
                                async for ADMIN_ID in cursor:
                                    await bot.send_message(ADMIN_ID[0], f'–ü–æ–ø—ã—Ç–∫–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏\nID: {message.from_user.id}\n–¢–µ–∫—Å—Ç: {name_}')
                    else:
                        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID‚ùå')
                else:
                    await message.reply(f'–ù–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö {param2[7]}‚ùå')
            except:
                await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID‚ùå')
    else:
        await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå')


"""–°–º–µ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
@dp.message(Command(commands=['time', 'timezone', 'set_time']))
async def timezone(message: Message):
    if len(message.text.split()) >= 2:
        timer = message.text.split()[1]
        last = None
        old_time = 0
        new = True
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î"""
        async with aiosqlite.connect(DB_NAME) as db:
            try:
                if -15 <= int(timer) <= 11:
                    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π"""
                    async with db.execute(f'SELECT last, time FROM stat WHERE user_id={message.from_user.id}') as cursor:
                        async for row in cursor:
                            last = row[0]
                            old_time = row[1]

                    """–°–º–µ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
                    if not (last is None):
                        if int(timer) - int(old_time) >= 0:
                            new_last = (datetime.datetime(day=int(last[0:2]), month=int(last[3:5]), year=int(last[6:10]),
                                                          hour=int(last[11:13]), minute=int(last[14:16]), second=int(last[17:19])
                                                          ) + datetime.timedelta(hours=int(timer) - int(old_time))).strftime("%d.%m.%Y %X")
                        else:
                            new_last = (datetime.datetime(day=int(last[0:2]), month=int(last[3:5]), year=int(last[6:10]),
                                                          hour=int(last[11:13]), minute=int(last[14:16]), second=int(last[17:19])
                                                          ) - datetime.timedelta(hours=int(old_time) - int(timer))).strftime(
                                "%d.%m.%Y %X")
                        await db.execute(
                            f'UPDATE stat SET last="{new_last}" WHERE user_id={message.from_user.id}')

                    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
                    async with db.execute(f'SELECT time FROM stat WHERE user_id={message.from_user.id}') as cursor:
                        async for row in cursor:
                            new = False

                    """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
                    if new:
                        await db.execute(
                            f'INSERT INTO stat(user_id, kol, koff, gets_kol, time) VALUES ({message.from_user.id}, 0, 0, 0, {int(timer)})')
                    else:
                        await db.execute(
                            f'UPDATE stat SET time={int(timer)} WHERE user_id={message.from_user.id}')
                    await db.commit()
                    await message.reply(f'–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ú–°–ö{"+" if int(timer) >= 0 else ""}{int(timer)}')
                else:
                    await message.reply('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå')

            except Exception:
                await message.reply('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå')
    else:
        await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå')


# @dp.message(Command(commands=['promo', 'promocode', 'activate']))
# async def promo(message: Message):
#     code_ = ''
#     type_ = ''
#     block = ''
#     bonus = 0
#     balance = 0
#     text = message.text.split()
#     if len(text) >= 2:
#         code_ = text[1]
#         async with aiosqlite.connect(DB_NAME) as db:
#             async with db.execute(f'SELECT * FROM promo WHERE text={code_}') as cursor:
#                 async for row in cursor:
#                     if row is None:
#                         await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥‚ùå')
#                     else:
#                         type_ = row[1]
#                         block = row[2]
#                         bonus = row[3]
#                         if type_ == 'kol':
#                             if block >= 1:
#                                 async with db.execute(f'SELECT kol FROM stat WHERE user_id={message.from_user.id}') as cursor:
#                                     async for row in cursor:
#                                         if row is None:
#                                             balance = 0
#                                         else:
#                                             balance = row[0]
#     else:
#         await message.reply('–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –≤–≤–µ–¥—ë–Ω‚ùå')


async def on_startup():
    bot_info = await bot.get_me()
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute(f'SELECT * FROM admins') as cursor:
            async for ADMIN in cursor:
                await bot.send_message(ADMIN[0], f'–ë–æ—Ç @{bot_info.username} –≤–∫–ª—é—á—ë–Ω')


async def on_shutdown():
    bot_info = await bot.get_me()
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute(f'SELECT * FROM admins') as cursor:
            async for ADMIN in cursor:
                await bot.send_message(ADMIN[0], f'–ë–æ—Ç @{bot_info.username} –≤—ã–∫–ª—é—á–µ–Ω')


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
