import asyncio
import logging
from aiogram import F
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, ReplyKeyboardRemove, InlineQuery
from aiogram.fsm.context import FSMContext

logging.basicConfig(level=logging.INFO)


@dp.message(F.text == cancel_keyboard.keyboard[0][0].text)
async def cancel(message: Message, state: FSMContext):
    await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /menu", reply_markup=main_keyboard)
    await state.clear()


"""–ü—Ä–æ–∫–∞—á–∫–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""


@dp.message(Command(commands=['upgrade']))
async def upgrade_main(message: Message, p1="", p2="") -> None:
    await upgrade(message, p1, p2)


"""–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º"""


@dp.message(Command(commands=['collect', 'collectible', 'collected']))
async def collect_main(message: Message, num_="") -> None:
    await collect(message, num_)


"""–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""


@dp.message(Command(commands=['name']))
async def naming_main(message: Message, id_="", name_="") -> None:
    await naming(message, id_, name_)


"""–°–º–µ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""


@dp.message(Command(commands=['time', 'timezone', 'set_time']))
async def timezone_main(message: Message, timer="") -> None:
    await timezone(message, timer)


"""–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""


@dp.message(Command(commands=['promo', 'promocode', 'activate']))
async def activate_main(message: Message, promo="") -> None:
    await activate(message, promo)


@dp.message(Command(commands=['new_admin', 'add_admin']))
async def new_admin_main(message: Message) -> None:
    await new_admin(message)


@dp.message(Command(commands=['execute', 'script', 'insert']))
async def execute_main(message: Message) -> None:
    await execute(message)


@dp.message(Command(commands=['select']))
async def select_main(message: Message) -> None:
    await select(message)


"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ (–ø–æ–º–µ—â–µ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–µ—Ä–µ–¥—É–º–∞—Ç—å –∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π)"""


@dp.message(Command(commands=['menu']))
@dp.message(F.text == main_keyboard.keyboard[4][0].text)
async def start_button(message: Message):
    await message.reply(CMD_TEXT, reply_markup=main_keyboard)


@dp.message(F.text == main_keyboard.keyboard[2][0].text)
async def upgrade_button_main(message: Message, state: FSMContext):
    await upgrade_button(message, state)


@dp.message(Form1.value)
async def process_upgrade_button_main(message: Message, state: FSMContext):
    await process_upgrade_button(message, state)


@dp.message(F.text == main_keyboard.keyboard[2][1].text)
async def name_button_main(message: Message, state: FSMContext):
    await name_button(message, state)


@dp.message(Form2.value)
async def process_name_button_main(message: Message, state: FSMContext):
    await process_name_button(message, state)


@dp.message(F.text == main_keyboard.keyboard[3][0].text)
async def collect_button_main(message: Message, state: FSMContext):
    await collect_button(message, state)


@dp.message(Form3.value)
async def process_collect_button_main(message: Message, state: FSMContext):
    await process_collect_button(message, state)


@dp.message(F.text == main_keyboard.keyboard[4][1].text)
async def time_button_main(message: Message, state: FSMContext):
    await time_button(message, state)


@dp.message(Form4.value)
async def process_time_button_main(message: Message, state: FSMContext):
    await process_time_button(message, state)


"""–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥"""


@dp.message(CommandStart())
@dp.message(F.text == main_keyboard.keyboard[0][0].text)
async def start_main(message: Message, command: CommandObject = CommandObject()) -> None:
    await start(message, command)


@dp.message(F.text == main_keyboard.keyboard[0][1].text)
async def turn_down(message: Message):
    await message.reply("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞.", reply_markup=ReplyKeyboardRemove())


"""–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""


@dp.message(F.text == main_keyboard.keyboard[1][0].text)
@dp.message(Command(commands=['get']))
async def get_main(message: Message) -> None:
    lvl_up = False
    maybe = False
    have_bonus = False
    bonus = 0
    DELTA = 2
    streak = 1
    h2 = ""

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ë–î"""
    user = await select_from_db(
        f"SELECT kol, last, gets_kol, koff, time, bonus_date, promo FROM stat WHERE user_id={message.from_user.id}")
    if len(user) == 0:
        await insert_into_db(
            f"INSERT INTO stat(user_id, kol, koff, gets_kol, time, streak, activity) VALUES ({message.from_user.id}, 0, 0, 0, 0, 1, 0)")
        user = await select_from_db(
            f"SELECT kol, last, gets_kol, koff, time, bonus_date, promo FROM stat WHERE user_id={message.from_user.id}")

    kol: int = user[0]
    last: str | None = user[1]
    gets_kol: int = user[2] + 1
    koff_index: int = user[3]
    timezona: int = user[4]
    bonus_date: str | None = user[5]
    promo: str | None = user[6]

    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dtime = await change_timedelta(datetime.datetime.now().strftime("%d.%m.%Y %X"), timezona)

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if not (promo is None):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–¥ –∏ –¥–∞—Ç—É"""
        code_ = promo.split(';')
        code_, date = code_[0], code_[1]

        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞"""
        val = await get_promo(code_)
        if not (val is None):
            if 'delta' in list(val.keys()):
                param = val['delta']

                """–û–∫–æ–Ω—á–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
                if param[1] == 'days':
                    end = await change_timedelta(date + " 00:00:00", param[2] * 24)
                    end = end.split()[0]
                else:
                    end = param[2]

                if (await check_min_datetime(dtime, end + " 23:59:59")) == dtime:
                    DELTA = param[0]

    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    get_kol = koffs[koff_index]

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (+2 - –∑–∞ 0-based –∏–Ω–¥–µ–∫—Å –∏ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å)"""
    if koff_index + 2 < len(koffs_kol):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
        if gets_kol == koffs_kol[koff_index + 1]:
            lvl_up = True
            koff_index += 1

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    if last is None:
        maybe = True

    else:
        """–ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å (–Ω–µ –≤—ã–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)"""
        user_date = datetime.date.today().strftime("%d.%m.%Y %X")
        bonus = max(int(random.choice(chance) *
                        random.choice([7.5, 10, 12.5])), 1
                    ) * get_kol
        if bonus_date is None:
            have_bonus = True
        else:
            if (await check_min_datetime(user_date, bonus_date + " 00:00:00")) == bonus_date + " 00:00:00":
                have_bonus = True

            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ—Ä–∏—é –≤—Ö–æ–¥–æ–≤"""
            tomorrow = await change_timedelta(bonus_date + " 00:00:00", 24)
            if (await check_min_datetime(user_date, tomorrow)) == 0:
                streak = (await select_from_db(f"SELECT streak FROM stat WHERE user_id={message.from_user.id}"))[0] + 1
                await insert_into_db(f'UPDATE stat SET streak={streak} WHERE user_id={message.from_user.id}')
            else:
                streak = 0
                await insert_into_db(f'UPDATE stat SET streak=1 WHERE user_id={message.from_user.id}')

        if have_bonus:
            get_kol += bonus
            await insert_into_db(f'UPDATE stat SET bonus_date="{
            user_date.split()[0]}" WHERE user_id={message.from_user.id}')

        """–í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ë–î"""
        h2 = await change_timedelta(last, DELTA)

        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è"""
        if (await check_min_datetime(dtime, h2)) != dtime:
            maybe = True

    if maybe:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await insert_into_db(
            f'UPDATE stat SET kol={kol + get_kol + streak // 3}, last="{dtime}", koff={
            koff_index}, gets_kol={gets_kol} WHERE user_id={
            message.from_user.id}')

        if DELTA % 10 == 1 and DELTA // 10 != 1:
            add = ""
        elif DELTA % 10 in [2, 3, 4] and DELTA // 10 % 10 != 1:
            add = '–∞'
        else:
            add = "–æ–≤"

        await message.reply(

            f'{message.from_user.full_name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {get_kol + streak // 3}{param1[13]}\n'

            f'{"üì¶–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: " + str(bonus) + param1[13] + "\n" if have_bonus else ""}'
            f'{"üî•–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è: " + str(streak) + " (–±–æ–Ω—É—Å: " + str(streak // 3) + param1[13] + ")\n" if streak > 1 else ""}'
            f'{"üí•–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞!\n" if not streak else ""}'

            f'‚è∞–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {DELTA} —á–∞—Å{add}.\n'
            f'–í—Å–µ–≥–æ: {kol + get_kol + streak // 3}{param1[13]}\n'

            f'{"üÜô–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! " if lvl_up else ""}–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {
            koff_index + 1} (x{koffs[koff_index]}). \n{
            "–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: " +
            str(koffs_kol[koff_index + 1] - gets_kol) if
            koff_index + 1 != len(koffs_kol) else ""}')

    else:
        dtime = await str_to_datetime(dtime)
        h2 = await str_to_datetime(h2)
        delta = h2 - dtime
        HH = delta.days * 24 + delta.seconds // 3600
        MM = delta.seconds // 60 - delta.seconds // 3600 * 60
        SS = delta.seconds - delta.seconds // 60 * 60
        await message.reply(f'–†–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç—å {param1[9]}!\n'
                            f'–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {HH if HH else ""}{"—á" if HH else ""} {MM}–º–∏–Ω {SS if not HH else ""}{"—Å" if not HH else ""}')


"""–ü–æ–∫—É–ø–∫–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""


@dp.message(F.text == main_keyboard.keyboard[1][1].text)
@dp.message(Command(commands=['buy']))
async def buy_main(message: Message, promo=0) -> None:
    await buy(message, promo)


"""–ü—Ä–æ—Ñ–∏–ª—å"""


@dp.message(F.text == main_keyboard.keyboard[3][1].text)
@dp.message(Command(commands=['me']))
async def me_main(message: Message) -> None:
    await me(message)


@dp.message(Command(commands=['sell']))
async def sell_main(message: Message) -> None:
    await sell(message)


@dp.message(Command(commands=['market']))
async def market_main(message: Message) -> None:
    await market(message)


@dp.inline_query()
async def inline_main(inline_query: InlineQuery):
    await inline(inline_query)


async def on_startup():
    bot_info = await bot.get_me()
    cursor = await select_from_db('SELECT * FROM admins')
    for ADMIN in cursor:
        if ADMIN[1]:
            await bot.send_message(ADMIN[0], f'–ë–æ—Ç @{bot_info.username} –≤–∫–ª—é—á—ë–Ω')


async def on_shutdown():
    bot_info = await bot.get_me()
    cursor = await select_from_db('SELECT * FROM admins')
    for ADMIN in cursor:
        if ADMIN[1]:
            await bot.send_message(ADMIN[0], f'–ë–æ—Ç @{bot_info.username} –≤—ã–∫–ª—é—á–µ–Ω')


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
  

