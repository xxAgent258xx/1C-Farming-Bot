import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message
import aiosqlite
import datetime
import logging
import random

from tokens import FARMING_BOT_TOKEN

"""–ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"""
"""–ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"""
"""–ü–ê–†–ê–ú–ï–¢–†–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø"""

"""–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö, —Ä–æ–¥/—á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ ('–ú' / '–ñ' / '–°–†' / '–ú–ù'), —ç–º–æ–¥–∑–∏"""
param1 = ["–≤—É–ø–ø–∏—Ç", "–≤—É–ø–ø–∏—Ç–∞", "–≤—É–ø–ø–∏—Ç—É", "–≤—É–ø–ø–∏—Ç–∞", "–≤—É–ø–ø–∏—Ç–æ–º", "–≤—É–ø–ø–∏—Ç–µ",
          "–≤—É–ø–ø–∏—Ç—ã", "–≤—É–ø–ø–∏—Ç–æ–≤", "–≤—É–ø–ø–∏—Ç–∞–º", "–≤—É–ø–ø–∏—Ç–æ–≤", "–≤—É–ø–ø–∏—Ç–∞–º–∏", "–≤—É–ø–ø–∏—Ç–∞—Ö",
          "–ú", "üß∏"]

"""–ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤–æ –≤—Å–µ—Ö –ø–∞–¥–µ–∂–∞—Ö, —Ä–æ–¥/—á–∏—Å–ª–æ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ ('–ú' / '–ñ' / '–°–†' / '–ú–ù'), —ç–º–æ–¥–∑–∏ –æ–±—ã—á–Ω–æ–≥–æ –∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ"""
param2 = ["–≤—É–ø–ø–∏—Ç", "–≤—É–ø–ø–∏—Ç–∞", "–≤—É–ø–ø–∏—Ç—É", "–≤—É–ø–ø–∏—Ç–∞", "–≤—É–ø–ø–∏—Ç–æ–º", "–≤—É–ø–ø–∏—Ç–µ",
          "–≤—É–ø–ø–∏—Ç—ã", "–≤—É–ø–ø–∏—Ç–æ–≤", "–≤—É–ø–ø–∏—Ç–∞–º", "–≤—É–ø–ø–∏—Ç–æ–≤", "–≤—É–ø–ø–∏—Ç–∞–º–∏", "–≤—É–ø–ø–∏—Ç–∞—Ö",
          "–ú", "üß∏", "üé†"]

"""–í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
names = ["–õ–µ–≤", "–¢–∏–≥—Ä", "–ú—ã—à—å", "–õ–æ—à–∞–¥—å", "–ü–∞–Ω—Ç–µ—Ä–∞",
         "–ö—Ä–æ–ª–∏–∫", "–ö–∞–ø–∏–±–∞—Ä–∞", "–í–æ–ª–∫", "–õ–∏—Å–∏—Ü–∞", "–•–æ–º—è–∫",
         "–£—Ç–∫–∞", "–ì—É—Å—å", "–û–ª–µ–Ω—å", "–ë–æ–±—ë—Ä", "–°–æ–≤–∞",
         "–ú–µ–¥–≤–µ–¥—å", "–ü–∞–Ω–¥–∞", "–ö–µ–Ω–≥—É—Ä—É", "–û—Ä—ë–ª", "–ê–Ω—Ç–∏–ª–æ–ø–∞",
         "–ï–Ω–æ—Ç", "–õ–µ–æ–ø–∞—Ä–¥", "–ó–µ–±—Ä–∞", "–î—Ä–∞–∫–æ–Ω", "–ö–æ—à–∫–∞"]

"""–ù–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ –ò.–ø., –†.–ø. –∏ –í.–ø."""
param3 = ["–®–µ—Ä—Å—Ç—å", "–ì–ª–∞–∑–∞", "–£–∑–æ—Ä",
          "–®–µ—Ä—Å—Ç–∏", "–ì–ª–∞–∑", "–£–∑–æ—Ä–∞",
          "–®–µ—Ä—Å—Ç—å", "–ì–ª–∞–∑–∞", "–£–∑–æ—Ä"]

"""–ó–Ω–∞—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
values1 = ["–ë–µ–ª–∞—è", "–†—ã–∂–∞—è", "–ö—Ä–∞—Å–Ω–∞—è", "–ì–æ–ª—É–±–∞—è", "–ñ—ë–ª—Ç–∞—è",
           "–ú–∞–ª–∏–Ω–æ–≤–∞—è", "–†–∞–¥—É–∂–Ω–∞—è", "–ó–µ–ª—ë–Ω–∞—è", "–§–∏–æ–ª–µ—Ç–æ–≤–∞—è", "–°–∏–Ω—è—è"]

values2 = ["–ë–µ–ª—ã–µ", "–†—ã–∂–∏–µ", "–ö—Ä–∞—Å–Ω—ã–µ", "–ì–æ–ª—É–±—ã–µ", "–ñ—ë–ª—Ç—ã–µ",
           "–ú–∞–ª–∏–Ω–æ–≤—ã–µ", "–†–∞–¥—É–∂–Ω—ã–µ", "–ó–µ–ª—ë–Ω—ã–µ", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–µ", "–°–∏–Ω–∏–µ"]

values3 = ["–ü–æ–ª–æ—Å–∫–∞", "–ö–ª–µ—Ç–∫–∞", "–ü—è—Ç–Ω–∞", "–¶–≤–µ—Ç—ã", "–ö–∞–º—É—Ñ–ª—è–∂",
           "–õ–µ–æ–ø–∞—Ä–¥", "–ó–≤—ë–∑–¥—ã", "–§–∏–≥—É—Ä—ã", "–°–µ—Ç–∫–∞", "–†—è–±—å"]

"""–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, –ø—Ä–æ–∫–∞—á–∫–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –≤—ã–ø—É—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω–æ–≥–æ"""
price = [50, 25, 30]

"""–ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò –ü–ê–†–ê–ú–ï–¢–†–û–í"""
"""–ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò –ü–ê–†–ê–ú–ï–¢–†–û–í"""
"""–ö–û–ù–ï–¶ –£–°–¢–ê–ù–û–í–ö–ò –ü–ê–†–ê–ú–ï–¢–†–û–í"""

"""–û–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞–¥–µ–∂–µ–π"""
add1 = "–æ–≥–æ" if param2[12] == '–ú' else "—É—é" if param2[12] == '–ñ' else "–æ–µ" if param2[12] == '–°–†' else '—ã–µ'
add2 = "–æ–π" if param2[12] == '–ñ' else "—ã–º–∏" if param2[12] == '–ú–ù' else "—ã–º"
add3 = "–æ–π" if param2[12] == '–ñ' else "—ã–º" if param2[12] == '–ú–ù' else "–æ–º—É"
add4 = "–æ–π" if param2[12] == '–ñ' else "—ã—Ö" if param2[12] == '–ú–ù' else "–æ–≥–æ"
add5 = "—ã–π" if param2[12] == '–ú' else "–∞—è" if param2[12] == '–ñ' else "–æ–µ" if param2[12] == '–°–†' else '—ã–µ'

chance = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]

"""–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"""
koffs = [1, 2, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
"""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
koffs_kol = [0, 10, 50, 100, 500, 1000, 2500, 5000, 10000, 25000, 50000]

DB_NAME = '1c.db'
TOKEN = FARMING_BOT_TOKEN


async def check_min_datetime(date1: str, date2: str) -> str | int:
    if int(date1[6:11]) > int(date2[6:11]):
        return date2
    elif int(date1[6:11]) < int(date2[6:11]):
        return date1
    else:
        if int(date1[3:5]) > int(date2[3:5]):
            return date2
        elif int(date1[3:5]) < int(date2[3:5]):
            return date1
        else:
            if int(date1[0:2]) > int(date2[0:2]):
                return date2
            elif int(date1[0:2]) < int(date2[0:2]):
                return date1
            else:
                if int(date1[11:13]) > int(date2[11:13]):
                    return date2
                elif int(date1[11:13]) < int(date2[11:13]):
                    return date1
                else:
                    if int(date1[14:16]) > int(date2[14:16]):
                        return date2
                    elif int(date1[14:16]) < int(date2[14:16]):
                        return date1
                    else:
                        if int(date1[17:19]) > int(date2[17:19]):
                            return date2
                        elif int(date1[17:19]) < int(date2[17:19]):
                            return date1
                        else:
                            return 0


async def select_from_db(query: str) -> list:
    ans = []
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute(query) as cursor:
            async for row in cursor:
                ans.append(list(row))
    if len(ans) == 1:
        return ans[0]
    else:
        return ans


async def change_timedelta(date: str, delta: int) -> str:
    if delta >= 0:
        ans = (datetime.datetime(day=int(date[0:2]),
                                 month=int(date[3:5]),
                                 year=int(date[6:10]),
                                 hour=int(date[11:13]),
                                 minute=int(date[14:16]),
                                 second=int(date[17:19]))
               + datetime.timedelta(hours=delta)).strftime("%d.%m.%Y %X")
    else:
        ans = (datetime.datetime(day=int(date[0:2]),
                                 month=int(date[3:5]),
                                 year=int(date[6:10]),
                                 hour=int(date[11:13]),
                                 minute=int(date[14:16]),
                                 second=int(date[17:19]))
               - datetime.timedelta(hours=abs(delta))).strftime("%d.%m.%Y %X")
    return ans


async def insert_into_db(query: str) -> None:
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute(query)
        await db.commit()


async def get_promo(query: str) -> dict | None:
    # ans = {
    #     "balance": 0,
    #     "buy": 0,
    #     "delta": [2, "days", 0],
    #     "sale": 1
    #        }

    ans = {}
    promo = await select_from_db(f'SELECT bonus FROM promo WHERE text="{query}"')
    if len(promo) == 0:
        return None
    else:
        for i in [x.split(':') for x in promo[0].split(';')]:
            if i[0] == "delta":
                ans[i[0]] = i[1].split('_')
                """–°–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
                ans[i[0]][0] = int(ans[i[0]][0])
                if ans[i[0]][1] == "days":
                    ans[i[0]][2] = int(ans[i[0]][2])
            elif i[0] == "sale":
                ans[i[0]] = i[1].split('_')
                """–°–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
                ans[i[0]][0] = float(ans[i[0]][0])
                if ans[i[0]][1] == "days":
                    ans[i[0]][2] = int(ans[i[0]][2])
            else:
                ans[i[0]] = int(i[1])

        return ans


"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
bot = Bot(token=TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)


"""–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥"""
@dp.message(CommandStart())
async def start(message: Message, command: CommandObject) -> None:

    if command.args:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        if not ((await get_promo(command.args)) is None):
            await activate(message, promo=command.args)

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if len(await select_from_db(f'SELECT * FROM stat WHERE user_id={message.from_user.id}')) == 0:
        await insert_into_db(
            f"INSERT INTO stat(user_id, kol, koff, gets_kol, time) VALUES ({message.from_user.id}, 0, 0, 0, 0)")

    await message.reply(
        '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!\n'
        f'–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å {param1[9]} –∏ –æ–±–º–µ–Ω–∏–≤–∞—Ç—å –∏—Ö –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ!\n'
        'üìã–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'

        f'/get - –ø–æ–ª—É—á–∏—Ç—å {param1[3]}{param1[13]}\n'
        f'/buy - –∫—É–ø–∏—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∑–∞ {price[0]}{param1[13]}\n'
        '/upgrade {‚Ññ} {#} - –ø—Ä–æ–∫–∞—á–∞—Ç—å ' +
        f'–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∑–∞ {price[1]}{param1[13]}\n'
        '/collect {‚Ññ} - —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é ' +
        f'–ø—Ä–æ–∫–∞—á–∞–Ω–Ω{add1} –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add2} –∑–∞ {price[2]}{param1[13]}\n'
        '/name {‚Ññ} {""} - –∑–∞–¥–∞—Ç—å –∏–º—è ' + f'–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add3} {param2[2]}\n'
        '/me - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n'
        '/time {–ß–ß} - —Å–º–µ–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ —Å –ú–°–ö\n'

        '\n{‚Ññ} - –Ω–æ–º–µ—Ä ' + f'{param2[1]}, —Å –∫–æ—Ç–æ—Ä—ã–º —Å–æ–≤–µ—Ä—à–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ\n'
        '{""} - –∏–º—è ' + f'{param2[1]}\n'
        '{–ß–ß} - —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç -15 –¥–æ +11\n'
        '{#} - –Ω–æ–º–µ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (1, 2 –∏–ª–∏ 3)')


"""–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã"""
@dp.message(Command(commands=['get']))
async def get(message: Message) -> None:
    lvl_up = False
    maybe = False
    have_bonus = False
    bonus = 0
    DELTA = 2

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ë–î"""
    user = await select_from_db(
        f"SELECT kol, last, gets_kol, koff, time, bonus_date, promo FROM stat WHERE user_id={message.from_user.id}")
    kol: int = user[0]
    last: str | None = user[1]
    gets_kol: int = user[2] + 1
    koff_index: int = user[3]
    timezona: int = user[4]
    bonus_date: str | None = user[5]
    promo: str = user[6]

    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dtime = await change_timedelta(datetime.datetime.now().strftime("%d.%m.%Y %X"), timezona)

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if not (promo is None):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–¥ –∏ –¥–∞—Ç—É"""
        code_ = promo.split(';')
        code_, date = code_[0], code_[1]

        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞"""
        val = await get_promo(code_)
        if not (val is None):
            if 'delta' in list(val.keys()):
                param = val['delta']

                """–û–∫–æ–Ω—á–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
                if param[1] == 'days':
                    end = await change_timedelta(date + " 00:00:00", param[2] * 24)
                    end = end.split()[0]
                else:
                    end = param[2]

                if (await check_min_datetime(dtime, end + " 23:59:59")) == dtime:
                    DELTA = param[0]

    """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã"""
    get_kol = koffs[koff_index]

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å (+2 - –∑–∞ 0-based –∏–Ω–¥–µ–∫—Å –∏ –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å)"""
    if koff_index + 2 < len(koffs_kol):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å"""
        if gets_kol == koffs_kol[koff_index + 1]:
            lvl_up = True
            koff_index += 1

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    if last is None:
        maybe = True

    else:
        """–ë–æ–Ω—É—Å –∑–∞ –Ω–æ–≤—ã–π –¥–µ–Ω—å (–Ω–µ –≤—ã–¥–∞—ë—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)"""
        user_date = await change_timedelta(datetime.date.today().strftime("%d.%m.%Y %X"), timezona)
        bonus = max(int(random.choice(chance) *
                        random.choice([7.5, 10, 12.5])), 1
                    ) * get_kol
        if bonus_date is None:
            have_bonus = True
        else:
            if (await check_min_datetime(user_date, bonus_date + " 00:00:00")) == bonus_date + " 00:00:00":
                have_bonus = True

        if have_bonus:
            get_kol += bonus
            await insert_into_db(f'UPDATE stat SET bonus_date="{
            user_date.split()[0]}" WHERE user_id={message.from_user.id}')

        """–í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ë–î"""
        h2 = await change_timedelta(last, DELTA)

        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è"""
        if (await check_min_datetime(dtime, h2)) != dtime:
            maybe = True

    if maybe:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await insert_into_db(
            f'UPDATE stat SET kol={kol + get_kol}, last="{dtime}", koff={
            koff_index}, gets_kol={gets_kol} WHERE user_id={
            message.from_user.id}')

        if DELTA % 10 == 1 and DELTA // 10 != 1:
            add = ""
        elif DELTA % 10 in [2, 3, 4] and DELTA // 10 != 1:
            add = '–∞'
        else:
            add = "–æ–≤"

        await message.reply(

            f'{message.from_user.full_name}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {get_kol}{param1[13]}{

            " (–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å: " + str(bonus) + param1[13] + ")" if have_bonus else ""}\n'

            f'–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ {DELTA} —á–∞—Å{add}. –í—Å–µ–≥–æ: {kol + get_kol}{param1[13]}\n'

            f'{"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å! " if lvl_up else ""}–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {
            koff_index + 1} (x{koffs[koff_index]}). {

            "–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: " +
            str(koffs_kol[koff_index + 1] - gets_kol) if
            koff_index + 1 != len(koffs_kol) else ""}')

    else:
        await message.reply(f'–†–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç—å {param1[9]}‚ùå')


"""–ü–æ–∫—É–ø–∫–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
@dp.message(Command(commands=['buy']))
async def buy(message: Message, promo=0) -> None:
    koff = 1
    cursor = await select_from_db(f'SELECT kol, time, promo FROM stat WHERE user_id={message.from_user.id}')
    balance, timezona, PROMO = cursor[0], cursor[1], cursor[2]

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if not (PROMO is None):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–¥ –∏ –¥–∞—Ç—É"""
        code_ = PROMO.split(';')
        code_, date = code_[0], code_[1]

        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞"""
        val = await get_promo(code_)
        if not (val is None):
            if 'sale' in list(val.keys()):
                param = val['sale']

                """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
                dtime = await change_timedelta(datetime.datetime.now().strftime("%d.%m.%Y %X"), timezona)

                """–û–∫–æ–Ω—á–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
                if param[1] == 'days':
                    end = await change_timedelta(date + " 00:00:00", param[2] * 24)
                    end = end.split()[0]
                else:
                    end = param[2]

                if (await check_min_datetime(dtime, end + " 23:59:59")) == dtime:
                    koff = param[0]

    """ID –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É–Ω–∏–∫–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
    num = (await select_from_db(f'SELECT max(id) FROM legendary WHERE user_id={message.from_user.id}'))[0]
    if num is None:
        num = 1
    else:
        num += 1

    """–ù–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –≤—ã–∑–≤–∞–Ω–æ –∏–∑ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    for i in range(promo):
        """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        name_ = random.choice(names)
        value1 = random.choice(chance)
        value2 = random.choice(chance)
        value3 = random.choice(chance)

        """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await insert_into_db(f'INSERT INTO legendary(id, user_id, animal, value1, value2, value3) VALUES({
        num}, {message.from_user.id}, "{name_}", {value1}, {value2}, {value3})')

        await message.reply(f'–í–∞–º –≤—ã–¥–∞–Ω –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add5} {param2[0]}!{param2[14]}\n'
                            f'‚Ññ: {num}\n'
                            f'–í–∏–¥: {name_}\n'
                            f'–£—Ä–æ–≤–µ–Ω—å {param3[3]}: {value1}\n'
                            f'–£—Ä–æ–≤–µ–Ω—å {param3[4]}: {value2}\n'
                            f'–£—Ä–æ–≤–µ–Ω—å {param3[5]}: {value3}\n\n'
                            f'–ü—Ä–æ–∫–∞—á–∞–π—Ç–µ {param2[3]} –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add2}!')

        num += 1

    if balance >= int(price[0] * koff) and not promo:
        """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        name_ = random.choice(names)
        value1 = random.choice(chance)
        value2 = random.choice(chance)
        value3 = random.choice(chance)

        """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await insert_into_db(f'UPDATE stat SET kol={balance - int(price[0] * koff)} WHERE user_id={message.from_user.id}')
        await insert_into_db(f'INSERT INTO legendary(id, user_id, animal, value1, value2, value3) VALUES({
        num}, {message.from_user.id}, "{name_}", {value1}, {value2}, {value3})')

        await message.reply(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–π –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add4} {param2[1]}!{param2[14]}\n'
                            f'‚Ññ: {num}\n'
                            f'–í–∏–¥: {name_}\n'
                            f'–£—Ä–æ–≤–µ–Ω—å {param3[3]}: {value1}\n'
                            f'–£—Ä–æ–≤–µ–Ω—å {param3[4]}: {value2}\n'
                            f'–£—Ä–æ–≤–µ–Ω—å {param3[5]}: {value3}\n\n'
                            f'–ü—Ä–æ–∫–∞—á–∞–π—Ç–µ {param2[3]} –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add2}!')
    elif balance < int(price[0] * koff):
        await message.reply(f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {param1[7]}‚ùå')


"""–ü—Ä–æ—Ñ–∏–ª—å"""
@dp.message(Command(commands=['me']))
async def me(message: Message) -> None:
    text = ''
    count = 0

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    prof = await select_from_db(f'SELECT * FROM stat WHERE user_id={message.from_user.id}')
    h2 = await change_timedelta(prof[2], 2)

    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    dtime = await change_timedelta(datetime.datetime.now().strftime("%d.%m.%Y %X"), prof[5])

    BOOL = (await check_min_datetime(h2, dtime)) != h2

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö"""
    cursor = await select_from_db(f'SELECT * FROM legendary WHERE user_id={message.from_user.id}')
    for row in cursor:
        count += 1
        text += (f'‚Ññ{row[0]}, {row[2]}{" " + row[3] if row[3] else ""}, '
                 f'{param3[0]}: {row[4] if row[4] else row[5]}, '
                 f'{param3[1]}: {row[6] if row[6] else row[7]}, '
                 f'{param3[2]}: {row[8] if row[8] else row[9]}\n')

    """–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    await message.reply(f'üÜîID: {prof[0]}\n'
                        f'{param1[13]}{param1[7].capitalize()}: {prof[1]}\n'
                        f'{param1[13]}–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {prof[3]}\n'
                        f'‚ÜóÔ∏è–í–∞—à —É—Ä–æ–≤–µ–Ω—å: {prof[4] + 1} (x{koffs[prof[4]]})\n'
                        f'{"üÜô–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: " +
                           str(koffs_kol[prof[4] + 1] - prof[3]) if prof[4] + 1 != len(koffs_kol) else ""}\n'
                        f'‚è∞–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ: {h2 if BOOL else '—É–∂–µ –¥–æ—Å—Ç—É–ø–Ω–æ! /get'}\n'
                        f'\n‚öôÔ∏è–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–°–ö{"+" if prof[5] >= 0 else ""}{prof[5]}'
                        )
    if count > 0:
        await message.reply(f'{param2[14]}–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö {param2[7]}: {count}\n{text}')


"""–ü—Ä–æ–∫–∞—á–∫–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
@dp.message(Command(commands=['upgrade']))
async def upgrade(message: Message) -> None:
    status = "OK"
    num = 0
    text = message.text.split()
    add = ''
    p1 = "0"
    p2 = "1"
    value = 0.0

    koff = 1
    cursor = await select_from_db(f'SELECT kol, time, promo FROM stat WHERE user_id={message.from_user.id}')
    kol, timezona, PROMO = cursor[0], cursor[1], cursor[2]

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if not (PROMO is None):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–¥ –∏ –¥–∞—Ç—É"""
        code_ = PROMO.split(';')
        code_, date = code_[0], code_[1]

        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞"""
        val = await get_promo(code_)
        if not (val is None):
            if 'sale' in list(val.keys()):
                param = val['sale']

                """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
                dtime = await change_timedelta(datetime.datetime.now().strftime("%d.%m.%Y %X"), timezona)

                """–û–∫–æ–Ω—á–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
                if param[1] == 'days':
                    end = await change_timedelta(date + " 00:00:00", param[2] * 24)
                    end = end.split()[0]
                else:
                    end = param[2]

                if (await check_min_datetime(dtime, end + " 23:59:59")) == dtime:
                    koff = param[0]

    if len(text) >= 3:
        p1 = text[1]
        p2 = text[2]
    else:
        status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå"

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
    cursor = await select_from_db(f'SELECT max(id) FROM legendary WHERE user_id={message.from_user.id}')
    if cursor[0] is None:
        status = f"–ù–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö {param2[7]}‚ùå"
    else:
        num = cursor[0]

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
    if p2 in ['1', '2', '3'] and p1 in [str(x) for x in range(1, num + 1)]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        value = (await select_from_db(
            f'SELECT value{p2} FROM legendary WHERE user_id={message.from_user.id} AND id={p1}'))[0]
        if value > 0.9:
            status = "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å‚ùå"
    else:
        status = "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è‚ùå"

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    if kol < int(price[1] * koff):
        status = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {param1[7]}‚ùå"

    if status == "OK":
        """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        add = param3[5 + int(p2)]

        await insert_into_db(f'UPDATE stat SET kol={kol - int(price[1] * koff)} WHERE user_id={message.from_user.id}')
        await insert_into_db(
            f'UPDATE legendary SET value{p2} = {round(value + 0.1, 1)} WHERE user_id={message.from_user.id} AND id={text[1]}')

        await message.reply(f'–í—ã –ø—Ä–æ–∫–∞—á–∞–ª–∏ {add} –¥–æ {round(value + 0.1, 1)}!\n'
                            f'–í–∞—à –±–∞–ª–∞–Ω—Å: {kol - int(price[1] * koff)}{param1[13]}\n')
    else:
        await message.reply(status)


"""–°–¥–µ–ª–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º"""
@dp.message(Command(commands=['collect', 'collectible', 'collected']))
async def collect(message: Message) -> None:
    status = "OK"
    koff = 1

    cursor = await select_from_db(f'SELECT kol, time, promo FROM stat WHERE user_id={message.from_user.id}')
    balance, timezona, PROMO = cursor[0], cursor[1], cursor[2]

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if not (PROMO is None):
        """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –∫–æ–¥ –∏ –¥–∞—Ç—É"""
        code_ = PROMO.split(';')
        code_, date = code_[0], code_[1]

        """–ü–æ–∏—Å–∫ –∫–æ–¥–∞"""
        val = await get_promo(code_)
        if not (val is None):
            if 'sale' in list(val.keys()):
                param = val['sale']

                """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
                dtime = await change_timedelta(datetime.datetime.now().strftime("%d.%m.%Y %X"), timezona)

                """–û–∫–æ–Ω—á–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
                if param[1] == 'days':
                    end = await change_timedelta(date + " 00:00:00", param[2] * 24)
                    end = end.split()[0]
                else:
                    end = param[2]

                if (await check_min_datetime(dtime, end + " 23:59:59")) == dtime:
                    koff = param[0]

    text = message.text.split()
    if len(text) >= 2:
        try:
            num = int(text[1])
        except ValueError:
            num = 0
    else:
        num = 0
        status = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå"

    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
    cursor = (await select_from_db('SELECT COUNT(*) FROM legendary'))[0]
    if len(names) * len(values1) * len(values2) * len(values3) == cursor:
        status = f"–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ {param2[6]} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å‚ùå"

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    count = (await select_from_db(f'SELECT max(id) FROM legendary WHERE user_id={message.from_user.id}'))[0]
    if count is None:
        count = 0

    if 1 <= num <= count:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ë–î"""
        cursor = await select_from_db(
            f'SELECT value1, value2, value3 FROM legendary WHERE user_id={message.from_user.id} AND id={int(num)}')
        if len(cursor) == 0:
            status = "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è‚ùå"
        else:
            check_values = sum(cursor)
            if check_values < 3:
                status = f"{param2[0].capitalize()} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ–∫–∞—á–∞–Ω‚ùå"
    else:
        status = "–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è‚ùå"

    """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
    balance = (await select_from_db(f'SELECT kol FROM stat WHERE user_id={message.from_user.id}'))[0]
    if balance < int(price[2] * koff):
        status = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {param1[7]}‚ùå"

    if status == "OK":
        """–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        value1 = random.choice(values1)
        value2 = random.choice(values2)
        value3 = random.choice(values3)

        """–ü–µ—Ä–≤–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π"""
        cursor = await select_from_db(
            f'SELECT id FROM legendary WHERE class1="{value1}" AND class2="{value2}" AND class3="{value3}"')

        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –Ω–∞ –ø–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        while len(cursor) != 0:
            value1 = random.choice(values1)
            value2 = random.choice(values2)
            value3 = random.choice(values3)
            cursor = await select_from_db(
                f'SELECT id FROM legendary WHERE class1="{value1}" AND class2="{value2}" AND class3="{value3}"')

        """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        await insert_into_db(
            f'UPDATE legendary SET class1="{value1}", class2="{value2}", class3="{value3}" WHERE user_id={message.from_user.id} AND id={int(num)}')
        await insert_into_db(f'UPDATE stat SET kol={balance - int(price[2] * koff)} WHERE user_id={message.from_user.id}')
        await message.reply(f'{param2[0].capitalize()} ‚Ññ{num} —Å—Ç–∞–ª –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add2}!{param2[14]}\n'
                            f'{param3[0]}: {value1}\n'
                            f'{param3[1]}: {value2}\n'
                            f'{param3[2]}: {value3}\n'
                            f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance - int(price[2] * koff)}{param1[13]}')
    else:
        await message.reply(status)


@dp.message(Command(commands=['new_admin', 'add_admin']))
async def new_admin(message: Message) -> None:
    check = False
    id_ = 0
    if len(message.text.split()) >= 2:
        id_ = message.text.split()[1]
    cursor = await select_from_db(f'SELECT * FROM admins WHERE id={message.from_user.id}')
    if len(cursor) > 0:
        check = True

    try:
        if check:
            await insert_into_db(f'INSERT INTO admins(id) VALUES({int(id_)})')
            await message.reply('–ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!')
        else:
            await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤‚ùå')

    except ValueError:
        await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID‚ùå')


"""–ü—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É"""
@dp.message(Command(commands=['name']))
async def naming(message: Message) -> None:
    if len(message.text.split()) >= 3:
        id_ = message.text.split()[1]
        name_ = ' '.join(message.text.split()[2:])

        count = (await select_from_db(f'SELECT max(id) FROM legendary WHERE user_id={message.from_user.id}'))[0]
        if count is None:
            count = 0
        try:
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π"""
            if count > 0:
                if 1 <= int(id_) <= count:
                    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—É—é SQL-–∏–Ω—ä–µ–∫—Ü–∏—é"""
                    BOOL = '"' in name_ or "'" in name_ or ')' in name_ or \
                            ']' in name_ or '}' in name_ or '--' in name_ or \
                            '=' in name_ or 'union' in name_.lower() or \
                            'concat' in name_.lower() or '*' in name_ or \
                            ';' in name_ or '@' in name_ or '|' in name_ or \
                            (r'\ '[0]) in name_ or '%' in name_ or \
                            '#' in name_ or '&' in name_ or '$' in name_ or \
                            'select' in name_.lower() or 'where' in name_.lower() or \
                            '/' in name_ or 'delete' in name_.lower()
                    if not BOOL:
                        """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
                        await insert_into_db(
                                f'UPDATE legendary SET name="{name_}" WHERE user_id={message.from_user.id} AND id={id_}')
                        await message.reply('–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ!')
                    else:
                        await message.reply('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã‚ùå')
                        cursor = await select_from_db(f'SELECT * FROM admins')
                        for ADMIN in cursor:
                            await bot.send_message(ADMIN[0],
                                                   f'–ü–æ–ø—ã—Ç–∫–∞ SQL-–∏–Ω—ä–µ–∫—Ü–∏–∏\nID: {message.from_user.id}\n–¢–µ–∫—Å—Ç: {name_}')
                else:
                    await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID‚ùå')
            else:
                await message.reply(f'–ù–µ—Ç –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö {param2[7]}‚ùå')
        except ValueError:
            await message.reply('–ù–µ–≤–µ—Ä–Ω—ã–π ID‚ùå')
    else:
        await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå')


"""–°–º–µ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
@dp.message(Command(commands=['time', 'timezone', 'set_time']))
async def timezone(message: Message) -> None:
    if len(message.text.split()) >= 2:
        timer = message.text.split()[1]

        try:
            if -15 <= int(timer) <= 11:
                timer = int(timer)
                """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π"""
                cursor = await select_from_db(
                    f'SELECT last, time FROM stat WHERE user_id={message.from_user.id}')
                last = cursor[0]
                old_time = cursor[1]

                """–°–º–µ–Ω–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –∑–∞–ø–∏—Å–∏ –≤ –ë–î"""
                if not (last is None):
                    new_last = await change_timedelta(last, timer - old_time)

                    """–ó–∞–ø–∏—Å—å –≤ –ë–î, –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
                    await insert_into_db(
                        f'UPDATE stat SET last="{new_last}" WHERE user_id={message.from_user.id}')

                    await insert_into_db(
                        f'UPDATE stat SET time={timer} WHERE user_id={message.from_user.id}')

                    await message.reply(f'–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ –ú–°–ö{"+" if timer >= 0 else ""}{timer}')
                else:
                    await message.reply('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå')

        except ValueError:
            await message.reply('–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ‚ùå')
    else:
        await message.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–π‚ùå')


@dp.message(Command(commands=['promo', 'promocode', 'activate']))
async def activate(message: Message, promo="") -> None:
    bonus = False

    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥"""
    if (await select_from_db(f"SELECT promo FROM stat WHERE user_id={message.from_user.id}"))[0] is None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥"""
        if promo == "":
            text = message.text.split()
            if len(text) >= 2:
                promo = text[1]
                if not ((await get_promo(promo)) is None):
                    bonus = await get_promo(promo)
                else:
                    await message.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω‚ùå")
            else:
                await message.reply("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –≤–≤–µ–¥—ë–Ω‚ùå")
        else:
            bonus = await get_promo(promo)

        if bonus:
            """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            timezona = (await select_from_db(f"SELECT time FROM stat WHERE user_id={message.from_user.id}"))[0]
            dtime = await change_timedelta(datetime.datetime.now().strftime("%d.%m.%Y %X"), timezona)

            """–û—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç—ã"""
            dtime = dtime.split()[0]

            """–ó–∞–ø–∏—Å—å –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –¥–∞—Ç—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"""
            await insert_into_db(f'UPDATE stat SET promo="{promo};{dtime}" WHERE user_id={message.from_user.id}')

            """–í—ã–¥–∞—á–∞ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π"""
            keys = list(bonus.keys())
            if "balance" in keys:
                kol = await select_from_db(f"SELECT kol FROM stat WHERE user_id={message.from_user.id}")
                await insert_into_db(f"UPDATE stat SET kol={kol[0] + bonus["balance"]} WHERE user_id={message.from_user.id}")
                await message.reply(f"–ó–∞—á–∏—Å–ª–µ–Ω–æ {kol}{param1[13]}")
            if "buy" in keys:
                await buy(message, promo=bonus["buy"])

    else:
        await message.reply("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥‚ùå")


async def on_startup():
    bot_info = await bot.get_me()
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute(f'SELECT * FROM admins') as cursor:
            async for ADMIN in cursor:
                await bot.send_message(ADMIN[0], f'–ë–æ—Ç @{bot_info.username} –≤–∫–ª—é—á—ë–Ω')


async def on_shutdown():
    bot_info = await bot.get_me()
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute(f'SELECT * FROM admins') as cursor:
            async for ADMIN in cursor:
                await bot.send_message(ADMIN[0], f'–ë–æ—Ç @{bot_info.username} –≤—ã–∫–ª—é—á–µ–Ω')


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
