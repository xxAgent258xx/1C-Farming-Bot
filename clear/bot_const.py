import datetime
import aiosqlite
from aiogram import Bot, Dispatcher
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from bot_param import param1, param2, price
from tokens import FARMING_BOT_TOKEN

"""–û–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–∞–¥–µ–∂–µ–π"""
add1 = "–æ–≥–æ" if param2[12] == '–ú' else "—É—é" if param2[12] == '–ñ' else "–æ–µ" if param2[12] == '–°–†' else '—ã–µ'
add2 = "–æ–π" if param2[12] == '–ñ' else "—ã–º–∏" if param2[12] == '–ú–ù' else "—ã–º"
add3 = "–æ–π" if param2[12] == '–ñ' else "—ã–º" if param2[12] == '–ú–ù' else "–æ–º—É"
add4 = "–æ–π" if param2[12] == '–ñ' else "—ã—Ö" if param2[12] == '–ú–ù' else "–æ–≥–æ"
add5 = "—ã–π" if param2[12] == '–ú' else "–∞—è" if param2[12] == '–ñ' else "–æ–µ" if param2[12] == '–°–†' else '—ã–µ'

chance = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]

"""–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"""
koffs = [1, 2, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]
"""–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
koffs_kol = [0, 10, 50, 100, 500, 1000, 2500, 5000, 10000, 25000, 50000]


"""–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
storage = MemoryStorage()
bot = Bot(token=FARMING_BOT_TOKEN)
dp = Dispatcher(storage=storage)
DB_NAME = '1c.db'


"""–ú–µ–Ω—é –±–æ—Ç–∞"""
main_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç'), KeyboardButton(text='‚¨áÔ∏è –°–≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é')],
    [KeyboardButton(text=f'{param1[13]} –ü–æ–ª—É—á–∏—Ç—å {param1[9]}'), KeyboardButton(text=f'{param2[13]} –ö—É–ø–∏—Ç—å {param2[3]}')],
    [KeyboardButton(text=f'{param2[13]} –£–ª—É—á—à–∏—Ç—å {param2[3]}'), KeyboardButton(text=f'{param2[13]} –ò–º—è {param2[1]}')],
    [KeyboardButton(text=f'{param2[14]} –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–π {param2[0]}'), KeyboardButton(text='üë§ –ü—Ä–æ—Ñ–∏–ª—å')],
    [KeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'), KeyboardButton(text='‚öôÔ∏è –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å')]
], resize_keyboard=True)

# main_keyboard.keyboard[0][0].text
time_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='UTC+2 (–ú–°–ö-1)'), KeyboardButton(text='UTC+3 (–ú–°–ö)')],
    [KeyboardButton(text='UTC+4 (–ú–°–ö+1)'), KeyboardButton(text='UTC+5 (–ú–°–ö+2)')],
    [KeyboardButton(text='UTC+6 (–ú–°–ö+3)'), KeyboardButton(text='UTC+7 (–ú–°–ö+4)')],
    [KeyboardButton(text='UTC+8 (–ú–°–ö+5)'), KeyboardButton(text='UTC+9 (–ú–°–ö+6)')],
    [KeyboardButton(text='UTC+10 (–ú–°–ö+7)'), KeyboardButton(text='UTC+11 (–ú–°–ö+8)')]
], resize_keyboard=True)

cancel_keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='‚óÄÔ∏è –û—Ç–º–µ–Ω–∞')]], resize_keyboard=True)


async def check_min_datetime(date1: str, date2: str) -> str | int:
    if int(date1[6:11]) > int(date2[6:11]):
        return date2
    elif int(date1[6:11]) < int(date2[6:11]):
        return date1
    else:
        if int(date1[3:5]) > int(date2[3:5]):
            return date2
        elif int(date1[3:5]) < int(date2[3:5]):
            return date1
        else:
            if int(date1[0:2]) > int(date2[0:2]):
                return date2
            elif int(date1[0:2]) < int(date2[0:2]):
                return date1
            else:
                if int(date1[11:13]) > int(date2[11:13]):
                    return date2
                elif int(date1[11:13]) < int(date2[11:13]):
                    return date1
                else:
                    if int(date1[14:16]) > int(date2[14:16]):
                        return date2
                    elif int(date1[14:16]) < int(date2[14:16]):
                        return date1
                    else:
                        if int(date1[17:19]) > int(date2[17:19]):
                            return date2
                        elif int(date1[17:19]) < int(date2[17:19]):
                            return date1
                        else:
                            return 0


async def select_from_db(query: str, db_name=DB_NAME) -> list:
    ans = []
    async with aiosqlite.connect(db_name) as db:
        async with db.execute(query) as cursor:
            async for row in cursor:
                ans.append(list(row))
    if len(ans) == 1:
        return ans[0]
    else:
        return ans


async def change_timedelta(date: str, delta: int) -> str:
    if delta >= 0:
        ans = (datetime.datetime(day=int(date[0:2]),
                                 month=int(date[3:5]),
                                 year=int(date[6:10]),
                                 hour=int(date[11:13]),
                                 minute=int(date[14:16]),
                                 second=int(date[17:19]))
               + datetime.timedelta(hours=delta)).strftime("%d.%m.%Y %X")
    else:
        ans = (datetime.datetime(day=int(date[0:2]),
                                 month=int(date[3:5]),
                                 year=int(date[6:10]),
                                 hour=int(date[11:13]),
                                 minute=int(date[14:16]),
                                 second=int(date[17:19]))
               - datetime.timedelta(hours=abs(delta))).strftime("%d.%m.%Y %X")
    return ans


async def str_to_datetime(date: str) -> datetime.datetime:
    ans = datetime.datetime(day=int(date[0:2]),
                            month=int(date[3:5]),
                            year=int(date[6:10]),
                            hour=int(date[11:13]),
                            minute=int(date[14:16]),
                            second=int(date[17:19]))
    return ans


async def insert_into_db(query: str, db_name=DB_NAME) -> None:
    async with aiosqlite.connect(db_name) as db:
        await db.execute(query)
        await db.commit()


async def get_promo(query: str) -> dict | None:
    # ans = {
    #     "balance": 0,
    #     "buy": 0,
    #     "delta": [2, "days", 0],
    #     "sale": 1
    #        }

    ans = {}
    promo = await select_from_db(f'SELECT bonus FROM promo WHERE text="{query}"')
    if len(promo) == 0:
        return None
    else:
        for i in [x.split(':') for x in promo[0].split(';')]:
            if i[0] == "delta":
                ans[i[0]] = i[1].split('_')
                """–°–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
                ans[i[0]][0] = int(ans[i[0]][0])
                if ans[i[0]][1] == "days":
                    ans[i[0]][2] = int(ans[i[0]][2])
            elif i[0] == "sale":
                ans[i[0]] = i[1].split('_')
                """–°–º–µ–Ω–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
                ans[i[0]][0] = float(ans[i[0]][0])
                if ans[i[0]][1] == "days":
                    ans[i[0]][2] = int(ans[i[0]][2])
            else:
                ans[i[0]] = int(i[1])

        return ans


class Form1(StatesGroup):
    value = State()


class Form2(StatesGroup):
    value = State()
    name = State()


class Form3(StatesGroup):
    value = State()


class Form4(StatesGroup):
    value = State()


class Form5(StatesGroup):
    value = State()
    cost = State()


class Form6(StatesGroup):
    value = State()


START_TEXT = \
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –∏–≥—Ä—É!\n' + \
    f'–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å {param1[9]}, –ø–æ–∫—É–ø–∞—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ {param2[6]}, –ø—Ä–æ–∫–∞—á–∏–≤–∞—Ç—å –∏—Ö –∏ –¥–µ–ª–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–º–∏!\n' + \
    f'–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /menu'

CMD_TEXT =\
    'üìã–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n' + \
    f'/get - –ø–æ–ª—É—á–∏—Ç—å {param1[3]}{param1[13]}\n' + \
    f'/buy - –∫—É–ø–∏—Ç—å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∑–∞ {price[0]} {param1[7]}{param1[13]}\n' + \
    '/upgrade - –ø—Ä–æ–∫–∞—á–∞—Ç—å ' + \
    f'–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∑–∞ {price[1]} {param1[7]}{param1[13]}\n' + \
    '/collect - —Å–¥–µ–ª–∞—Ç—å ' + \
    f'–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω{add1} {param2[3]} –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add2} –∑–∞ {price[2]} {param1[7]}{param1[13]}\n' + \
    '/sell - –≤—ã—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–¥–∞–∂—É ' + f'–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add1} {param2[3]}\n' + \
    '@wuppit_bot üî§ üî§ üî§ - –æ—Ç–∫—Ä—ã—Ç—å –ú–∞—Ä–∫–µ—Ç (–¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –ª—é–±–æ–π —Å–∏–º–≤–æ–ª)\n' + \
    '/market üî§ üî§ üî§ - –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ' + f'–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω{add1} {param2[3]}\n' + \
    '/name - –∑–∞–¥–∞—Ç—å –∏–º—è ' + f'{param2[2]}\n' + \
    '/me - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n' + \
    '/promo - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n' + \
    '/time - —Å–º–µ–Ω–∏—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ —Å –ú–°–ö\n' + \
    '\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n' + \
    'üî§ - –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å–ª–æ–≤–æ)\n'
